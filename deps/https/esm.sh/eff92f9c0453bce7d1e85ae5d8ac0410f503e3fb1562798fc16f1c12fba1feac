/* esm.sh - esbuild bundle(ml-random@0.5.0) deno production */
import b from"/v120/ml-xsadd@2.0.0/deno/ml-xsadd.mjs";function d(t,r={},e=Math.random){let{size:o=1,replace:a=!1,probabilities:l}=r,s,n;if(typeof t=="number"?s=m(t):s=t.slice(),l){if(!a)throw new Error("choice with probabilities and no replacement is not implemented");if(l.length!==s.length)throw new Error("the length of probabilities option should be equal to the number of choices");n=[l[0]];for(let i=1;i<l.length;i++)n[i]=n[i-1]+l[i];if(Math.abs(1-n[n.length-1])>1e-8)throw new Error(`probabilities should sum to 1, but instead sums to ${n[n.length-1]}`)}if(a===!1&&o>s.length)throw new Error("size option is too large");let u=[];for(let i=0;i<o;i++){let c=p(s.length,e,n);u.push(s[c]),a||s.splice(c,1)}return u}function m(t){let r=[];for(let e=0;e<t;e++)r.push(e);return r}function p(t,r,e){let o=r();if(e){let a=0;for(;o>e[a];)a++;return a}else return Math.floor(o*t)}var h=d;var f=class{constructor(r=Math.random){if(typeof r=="number"){let e=new b(r);this.randomGenerator=e.random}else this.randomGenerator=r}choice(r,e){return typeof r=="number"?h(r,e,this.randomGenerator):h(r,e,this.randomGenerator)}random(){return this.randomGenerator()}randInt(r,e){return e===void 0&&(e=r,r=0),r+Math.floor(this.randomGenerator()*(e-r))}randomSample(r){let e=[];for(let o=0;o<r;o++)e.push(this.random());return e}};export{f as default};
//# sourceMappingURL=ml-random.mjs.map