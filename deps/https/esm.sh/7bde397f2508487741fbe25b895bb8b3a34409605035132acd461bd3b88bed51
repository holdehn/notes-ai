declare const _default: {
    bf: {
        ADD: typeof import("./bloom/ADD.d.ts");
        add: typeof import("./bloom/ADD.d.ts");
        CARD: typeof import("./bloom/CARD.d.ts");
        card: typeof import("./bloom/CARD.d.ts");
        EXISTS: typeof import("./bloom/EXISTS.d.ts");
        exists: typeof import("./bloom/EXISTS.d.ts");
        INFO: typeof import("./bloom/INFO.d.ts");
        info: typeof import("./bloom/INFO.d.ts");
        INSERT: typeof import("./bloom/INSERT.d.ts");
        insert: typeof import("./bloom/INSERT.d.ts");
        LOADCHUNK: typeof import("./bloom/LOADCHUNK.d.ts");
        loadChunk: typeof import("./bloom/LOADCHUNK.d.ts");
        MADD: typeof import("./bloom/MADD.d.ts");
        mAdd: typeof import("./bloom/MADD.d.ts");
        MEXISTS: typeof import("./bloom/MEXISTS.d.ts");
        mExists: typeof import("./bloom/MEXISTS.d.ts");
        RESERVE: typeof import("./bloom/RESERVE.d.ts");
        reserve: typeof import("./bloom/RESERVE.d.ts");
        SCANDUMP: typeof import("./bloom/SCANDUMP.d.ts");
        scanDump: typeof import("./bloom/SCANDUMP.d.ts");
    };
    cms: {
        INCRBY: typeof import("./count-min-sketch/INCRBY.d.ts");
        incrBy: typeof import("./count-min-sketch/INCRBY.d.ts");
        INFO: typeof import("./count-min-sketch/INFO.d.ts");
        info: typeof import("./count-min-sketch/INFO.d.ts");
        INITBYDIM: typeof import("./count-min-sketch/INITBYDIM.d.ts");
        initByDim: typeof import("./count-min-sketch/INITBYDIM.d.ts");
        INITBYPROB: typeof import("./count-min-sketch/INITBYPROB.d.ts");
        initByProb: typeof import("./count-min-sketch/INITBYPROB.d.ts");
        MERGE: typeof import("./count-min-sketch/MERGE.d.ts");
        merge: typeof import("./count-min-sketch/MERGE.d.ts");
        QUERY: typeof import("./count-min-sketch/QUERY.d.ts");
        query: typeof import("./count-min-sketch/QUERY.d.ts");
    };
    cf: {
        ADD: typeof import("./cuckoo/ADD.d.ts");
        add: typeof import("./cuckoo/ADD.d.ts");
        ADDNX: typeof import("./cuckoo/ADDNX.d.ts");
        addNX: typeof import("./cuckoo/ADDNX.d.ts");
        COUNT: typeof import("./cuckoo/COUNT.d.ts");
        count: typeof import("./cuckoo/COUNT.d.ts");
        DEL: typeof import("./cuckoo/DEL.d.ts");
        del: typeof import("./cuckoo/DEL.d.ts");
        EXISTS: typeof import("./cuckoo/EXISTS.d.ts");
        exists: typeof import("./cuckoo/EXISTS.d.ts");
        INFO: typeof import("./cuckoo/INFO.d.ts");
        info: typeof import("./cuckoo/INFO.d.ts");
        INSERT: typeof import("./cuckoo/INSERT.d.ts");
        insert: typeof import("./cuckoo/INSERT.d.ts");
        INSERTNX: typeof import("./cuckoo/INSERTNX.d.ts");
        insertNX: typeof import("./cuckoo/INSERTNX.d.ts");
        LOADCHUNK: typeof import("./cuckoo/LOADCHUNK.d.ts");
        loadChunk: typeof import("./cuckoo/LOADCHUNK.d.ts");
        RESERVE: typeof import("./cuckoo/RESERVE.d.ts");
        reserve: typeof import("./cuckoo/RESERVE.d.ts");
        SCANDUMP: typeof import("./cuckoo/SCANDUMP.d.ts");
        scanDump: typeof import("./cuckoo/SCANDUMP.d.ts");
    };
    tDigest: {
        ADD: typeof import("./t-digest/ADD.d.ts");
        add: typeof import("./t-digest/ADD.d.ts");
        BYRANK: typeof import("./t-digest/BYRANK.d.ts");
        byRank: typeof import("./t-digest/BYRANK.d.ts");
        BYREVRANK: typeof import("./t-digest/BYREVRANK.d.ts");
        byRevRank: typeof import("./t-digest/BYREVRANK.d.ts");
        CDF: typeof import("./t-digest/CDF.d.ts");
        cdf: typeof import("./t-digest/CDF.d.ts");
        CREATE: typeof import("./t-digest/CREATE.d.ts");
        create: typeof import("./t-digest/CREATE.d.ts");
        INFO: typeof import("./t-digest/INFO.d.ts");
        info: typeof import("./t-digest/INFO.d.ts");
        MAX: typeof import("./t-digest/MAX.d.ts");
        max: typeof import("./t-digest/MAX.d.ts");
        MERGE: typeof import("./t-digest/MERGE.d.ts");
        merge: typeof import("./t-digest/MERGE.d.ts");
        MIN: typeof import("./t-digest/MIN.d.ts");
        min: typeof import("./t-digest/MIN.d.ts");
        QUANTILE: typeof import("./t-digest/QUANTILE.d.ts");
        quantile: typeof import("./t-digest/QUANTILE.d.ts");
        RANK: typeof import("./t-digest/RANK.d.ts");
        rank: typeof import("./t-digest/RANK.d.ts");
        RESET: typeof import("./t-digest/RESET.d.ts");
        reset: typeof import("./t-digest/RESET.d.ts");
        REVRANK: typeof import("./t-digest/REVRANK.d.ts");
        revRank: typeof import("./t-digest/REVRANK.d.ts");
        TRIMMED_MEAN: typeof import("./t-digest/TRIMMED_MEAN.d.ts");
        trimmedMean: typeof import("./t-digest/TRIMMED_MEAN.d.ts");
    };
    topK: {
        ADD: typeof import("./top-k/ADD.d.ts");
        add: typeof import("./top-k/ADD.d.ts");
        COUNT: typeof import("./top-k/COUNT.d.ts");
        count: typeof import("./top-k/COUNT.d.ts");
        INCRBY: typeof import("./top-k/INCRBY.d.ts");
        incrBy: typeof import("./top-k/INCRBY.d.ts");
        INFO: typeof import("./top-k/INFO.d.ts");
        info: typeof import("./top-k/INFO.d.ts");
        LIST_WITHCOUNT: typeof import("./top-k/LIST_WITHCOUNT.d.ts");
        listWithCount: typeof import("./top-k/LIST_WITHCOUNT.d.ts");
        LIST: typeof import("./top-k/LIST.d.ts");
        list: typeof import("./top-k/LIST.d.ts");
        QUERY: typeof import("./top-k/QUERY.d.ts");
        query: typeof import("./top-k/QUERY.d.ts");
        RESERVE: typeof import("./top-k/RESERVE.d.ts");
        reserve: typeof import("./top-k/RESERVE.d.ts");
    };
};
export default _default;
