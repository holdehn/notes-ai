/* esm.sh - esbuild bundle(@supabase/realtime-js@2.7.2/dist/module/lib/transformers) deno production */
var n;(function(t){t.abstime="abstime",t.bool="bool",t.date="date",t.daterange="daterange",t.float4="float4",t.float8="float8",t.int2="int2",t.int4="int4",t.int4range="int4range",t.int8="int8",t.int8range="int8range",t.json="json",t.jsonb="jsonb",t.money="money",t.numeric="numeric",t.oid="oid",t.reltime="reltime",t.text="text",t.time="time",t.timestamp="timestamp",t.timestamptz="timestamptz",t.timetz="timetz",t.tsrange="tsrange",t.tstzrange="tstzrange"})(n||(n={}));var z=(t,r,i={})=>{var c;let o=(c=i.skipTypes)!==null&&c!==void 0?c:[];return Object.keys(r).reduce((e,a)=>(e[a]=u(a,t,r,o),e),{})},u=(t,r,i,c)=>{let o=r.find(m=>m.name===t),e=o?.type,a=i[t];return e&&!c.includes(e)?f(e,a):s(a)},f=(t,r)=>{if(t.charAt(0)==="_"){let i=t.slice(1,t.length);return x(r,i)}switch(t){case n.bool:return l(r);case n.float4:case n.float8:case n.int2:case n.int4:case n.int8:case n.numeric:case n.oid:return d(r);case n.json:case n.jsonb:return p(r);case n.timestamp:return b(r);case n.abstime:case n.date:case n.daterange:case n.int4range:case n.int8range:case n.money:case n.reltime:case n.text:case n.time:case n.timestamptz:case n.timetz:case n.tsrange:case n.tstzrange:return s(r);default:return s(r)}},s=t=>t,l=t=>{switch(t){case"t":return!0;case"f":return!1;default:return t}},d=t=>{if(typeof t=="string"){let r=parseFloat(t);if(!Number.isNaN(r))return r}return t},p=t=>{if(typeof t=="string")try{return JSON.parse(t)}catch(r){return console.log(`JSON parse error: ${r}`),t}return t},x=(t,r)=>{if(typeof t!="string")return t;let i=t.length-1,c=t[i];if(t[0]==="{"&&c==="}"){let e,a=t.slice(1,i);try{e=JSON.parse("["+a+"]")}catch{e=a?a.split(","):[]}return e.map(m=>f(r,m))}return t},b=t=>typeof t=="string"?t.replace(" ","T"):t;export{n as PostgresTypes,f as convertCell,z as convertChangeData,u as convertColumn,x as toArray,l as toBoolean,p as toJson,d as toNumber,b as toTimestampString};
//# sourceMappingURL=transformers.js.map